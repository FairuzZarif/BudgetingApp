@model IEnumerable<BudgetingApp.Models.Expense>

@{
    ViewData["Title"] = "My Expenses";
    var chartData = Model
        .OrderByDescending(e => e.Amount)
        .Take(10)
        .Select(e => new { label = e.Description, value = e.Amount })
        .ToList();
}

<div class="container mt-5">
    <h2 class="mb-4 text-center">My Expenses</h2>

    <!-- Expenses Table -->
    <div class="table-responsive">
        <table class="table table-hover table-bordered shadow-sm">
            <thead class="table-primary">
                <tr>
                    <th>Description</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Description</td>
                        <td>@item.Amount.ToString("C")</td>
                        <td>@item.Category</td>
                        <td>@item.Date.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Side-by-side Charts -->
    <h2 class="mt-5 mb-4 text-center">Visual Breakdown of Expenses</h2>
    <div class="row justify-content-center align-items-start">
        <!-- Pie Chart -->
        <div class="col-md-6 d-flex justify-content-center">
            <div style="width: 550px; height: 550px;">
                <canvas id="categoryChart"></canvas>
            </div>
        </div>

        <!-- Bar Chart -->
        <div class="col-md-6 d-flex justify-content-center">
            <div style="width: 550px; height: 550px;">
                <canvas id="expenseChart"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Pie Chart Script -->
<script>
    const categoryCtx = document.getElementById('categoryChart').getContext('2d');

    fetch('/Expenses/GetChart')
        .then(response => response.json())
        .then(data => {
            new Chart(categoryCtx, {
                type: 'pie',
                data: {
                    labels: data.map(d => d.category),
                    datasets: [{
                        label: 'Total Amount Spent',
                        data: data.map(d => d.total),
                        backgroundColor: [
                            '#007bff', '#28a745', '#dc3545', '#ffc107',
                            '#17a2b8', '#6f42c1', '#fd7e14', '#20c997'
                        ],
                        borderColor: '#ffffff',
                        borderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        title: {
                            display: true,
                            text: 'Spending by Category'
                        }
                    }
                }
            });
        });
</script>

<!-- Bar Chart Script -->
<script>
    const expenseCtx = document.getElementById('expenseChart').getContext('2d');
    const expenseData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(chartData));

    new Chart(expenseCtx, {
        type: 'bar',
        data: {
            labels: expenseData.map(e => e.label),
            datasets: [{
                label: 'Amount ($)',
                data: expenseData.map(e => e.value),
                backgroundColor: '#007bff',
                borderColor: '#0056b3',
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'Top Expenses by Cost'
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    ticks: {
                        callback: value => `$${value}`
                    }
                }
            }
        }
    });
</script>
